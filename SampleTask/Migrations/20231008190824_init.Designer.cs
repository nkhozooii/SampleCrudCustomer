// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SampleTask.Data;

#nullable disable

namespace SampleTask.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231008190824_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SampleTask.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("SampleTask.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_Customer_CityId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("SampleTask.Models.CustomerCoworker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FkCoworkerId")
                        .HasColumnType("int")
                        .HasColumnName("FK_CoworkerId");

                    b.Property<int?>("FkCustomerId")
                        .HasColumnType("int")
                        .HasColumnName("FK_CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("FkCoworkerId");

                    b.HasIndex("FkCustomerId");

                    b.ToTable("CustomerCoworker", (string)null);
                });

            modelBuilder.Entity("SampleTask.Models.Customer", b =>
                {
                    b.HasOne("SampleTask.Models.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("SampleTask.Models.CustomerCoworker", b =>
                {
                    b.HasOne("SampleTask.Models.Customer", "FkCoworker")
                        .WithMany("CustomerCoworkerFkCoworkers")
                        .HasForeignKey("FkCoworkerId")
                        .HasConstraintName("FK_CustomerCoworker_Coworker");

                    b.HasOne("SampleTask.Models.Customer", "FkCustomer")
                        .WithMany("CustomerCoworkerFkCustomers")
                        .HasForeignKey("FkCustomerId")
                        .HasConstraintName("FK_CustomerCoworker_Customer");

                    b.Navigation("FkCoworker");

                    b.Navigation("FkCustomer");
                });

            modelBuilder.Entity("SampleTask.Models.City", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("SampleTask.Models.Customer", b =>
                {
                    b.Navigation("CustomerCoworkerFkCoworkers");

                    b.Navigation("CustomerCoworkerFkCustomers");
                });
#pragma warning restore 612, 618
        }
    }
}
